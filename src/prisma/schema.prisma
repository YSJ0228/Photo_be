// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PointType {
  DRAW // 뽑기(양수)
  PURCHASE // 구매(음수)
  SALE // 판매(양수)
}

enum ExchangeStatus {
  REQUESTED // 교환 요청됨
  ACCEPTED // 교환 수락됨
  REJECTED // 교환 거절됨
  CANCELLED // 교환 취소됨
  COMPLETED // 교환 완료됨
}

enum CardStatus {
  IDLE // 기본 상태 (소장 중)
  FOR_SALE // 판매만 원하는 상태
  FOR_SALE_AND_TRADE // 판매 및 교환을 원하는 상태
  SOLD // 판매 또는 교환이 완료된 상태
}

enum CardGrade {
  COMMON
  RARE
  SUPER_RARE
  LEGENDARY
}

enum CardGenre {
  TRAVEL
  LANDSCAPE
  PORTRAIT
  OBJECT
}

enum NotificationType {
  EXCHANGE_PROPOSED // 교환 제안 알림
  EXCHANGE_ACCEPTED // 교환 승인 알림
  EXCHANGE_DECLINED // 교환 거절 알림
  PURCHASE_COMPLETED // 구매 완료 알림
  SELL_COMPLETED // 판매 완료 알림
  SOLD_OUT // 품절 알림
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique // 이메일 (유일해야 함)
  encryptedPassword String // 암호화된 비밀번호
  nickname          String         @unique // 닉네임 (유일해야 함)
  refreshToken      String? // 리프레시 토큰 (선택 사항)
  createdAt         DateTime       @default(now()) // 레코드 생성 시간
  updatedAt         DateTime       @updatedAt // 레코드 업데이트 시간
  userCard          UserCard[] // 유저가 소유한 포토카드 목록 (UserCard 모델과 1:N 관계)
  notification      Notification[] // 유저가 받은 알림 목록 (Notification 모델과 1:N 관계)
  pointHistorie     PointHistory[] // 유저의 포인트 적립/사용 기록 (PointHistory 모델과 1:N 관계)
  point             Point? // 유저의 현재 포인트 잔액 정보 (Point 모델과 1:1 관계)
}

model PhotoCard {
  id              Int        @id @default(autoincrement())
  name            String // 포토카드 이름
  description     String? // 포토카드 설명 (선택 사항)
  imageUrl        String // 포토카드 이미지 URL
  grade           CardGrade // 포토카드 등급
  genre           CardGenre // 포토카드 장르
  price           Int // 포토카드 판매 가격
  initialQuantity Int // 최초 발행 수량
  createdAt       DateTime   @default(now()) // 레코드 생성 시간
  updatedAt       DateTime   @updatedAt // 레코드 업데이트 시간
  userCard        UserCard[] // 이 포토카드를 소유한 UserCard 목록 (UserCard 모델과 1:N 관계)
}

// 유저가 소유한 포토카드 정보를 관리하는 모델
// 한 명의 유저가 같은 종류의 포토카드를 여러 장 소유할 수 있음
model UserCard {
  id               Int        @id @default(autoincrement())
  status           CardStatus @default(IDLE) // 포토카드 상태 (기본값: 소장 중)
  createdAt        DateTime   @default(now()) // 레코드 생성 시간
  updatedAt        DateTime   @updatedAt // 레코드 업데이트 시간
  user             User       @relation(fields: [userId], references: [id]) // 이 포토카드를 소유한 유저 (User 모델 참조)
  userId           Int
  photoCard        PhotoCard  @relation(fields: [photoCardId], references: [id]) // 이 UserCard가 어떤 PhotoCard인지 (PhotoCard 모델 참조)
  photoCardId      Int
  requestExchanges Exchange[] @relation("RequestCard") // 이 카드를 제안한 교환 요청 목록 (Exchange 모델과 1:N 관계)
  targetExchanges  Exchange[] @relation("TargetCard") // 이 카드를 대상으로 하는 교환 요청 목록 (Exchange 모델과 1:N 관계)
  shop             Shop[] // 이 카드가 등록된 판매 게시글 목록 (Shop 모델과 1:N 관계)
}

// 포토카드 판매 게시글 정보를 관리하는 모델
model Shop {
  id                  Int       @id @default(autoincrement())
  price               Int // 판매 가격
  initialQuantity     Int       @default(0) // 최초 판매 수량
  remainingQuantity   Int       @default(0) // 남은 판매 수량
  exchangeGrade       CardGrade @default(COMMON) // 교환 시 원하는 포토카드 등급 (선택 사항)
  exchangeGenre       CardGenre @default(TRAVEL) // 교환 시 원하는 포토카드 장르 (선택 사항)
  exchangeDescription String? // 교환 관련 추가 설명 (선택 사항)
  createdAt           DateTime  @default(now()) // 레코드 생성 시간
  updatedAt           DateTime  @updatedAt // 레코드 업데이트 시간
  userCard            UserCard  @relation(fields: [userCardId], references: [id]) // 판매하는 UserCard (UserCard 모델 참조)
  userCardId          Int
}

// 유저의 포인트 적립/사용 기록을 관리하는 모델(필수는 아님)
model PointHistory {
  id        Int       @id @default(autoincrement())
  points    Int // 포인트 변동량 (양수: 적립, 음수: 사용)
  pointType PointType // 포인트 변동 유형
  createdAt DateTime  @default(now()) // 레코드 생성 시간
  updatedAt DateTime  @updatedAt // 레코드 업데이트 시간
  user      User      @relation(fields: [userId], references: [id]) // 포인트 기록과 연결된 유저 (User 모델 참조)
  userId    Int
}

model Point {
  id        Int      @id @default(autoincrement())
  balance   Int      @default(0) // 현재 포인트 잔액 (기본값: 0)
  createdAt DateTime @default(now()) // 레코드 생성 시간
  updatedAt DateTime @updatedAt // 레코드 업데이트 시간
  user      User     @relation(fields: [userId], references: [id]) // 포인트 정보와 연결된 유저 (User 모델 참조)
  userId    Int      @unique
}

model Notification {
  id               Int              @id @default(autoincrement())
  content          String // 알림 내용
  notificationType NotificationType // 알림 유형
  isRead           Boolean          @default(false) // 알림 읽음 여부 (기본값: 안 읽음)
  createdAt        DateTime         @default(now()) // 레코드 생성 시간
  updatedAt        DateTime         @updatedAt // 레코드 업데이트 시간
  user             User             @relation(fields: [userId], references: [id]) // 알림을 받는 유저 (User 모델 참조)
  userId           Int
}

// 유저 간의 포토카드 교환 요청 정보를 관리하는 모델
model Exchange {
  id            Int            @id @default(autoincrement())
  status        ExchangeStatus // 교환 상태 (REQUESTED, ACCEPTED, REJECTED, CANCELLED, COMPLETED 중 하나)
  description   String? // 교환 관련 설명 (선택 사항)
  createdAt     DateTime       @default(now()) // 레코드 생성 시간
  updatedAt     DateTime       @updatedAt // 레코드 업데이트 시간
  requestCard   UserCard       @relation("RequestCard", fields: [requestCardId], references: [id]) // 교환을 요청하는 유저의 카드 (UserCard 모델 참조)
  requestCardId Int
  targetCard    UserCard       @relation("TargetCard", fields: [targetCardId], references: [id]) // 교환 대상 카드 (UserCard 모델 참조)
  targetCardId  Int
}
